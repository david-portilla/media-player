{"id":"ejercicios/this.html","dependencies":[{"name":"/Users/david/dportilla/learning JS/Media-player-plugin/package.json","includedInParent":true,"mtime":1586459586990}],"generated":{"html":"<html>\n  <head>\n    <title>this</title>\n  </head>\n\n  <body>\n    <a href=\"/ejercicios/\">Go back</a>\n    <p><em>Abre la consola</em></p>\n\n    <h1>\n      <code>this</code> se refiere a un objeto. Ese objeto es el que actualmente\n      está ejecutando un pedazo de código.\n    </h1>\n\n    <script>// this en el scope global\nconsole.log(\"this: \".concat(this)); // this en el scope de una función\n\nfunction whoIsThis() {\n  return this;\n}\n\nconsole.log(\"whoIsThis(): \".concat(whoIsThis())); // this en el scope de una función en strict mode\n\nfunction whoIsThisStrict() {\n  'use strict';\n\n  return this;\n}\n\nconsole.log(\"whoIsThisStrict(): \".concat(whoIsThisStrict())); // this en el contexto de un objeto\n\nvar person = {\n  name: 'Gabriel',\n  saludar: function saludar() {\n    console.log(\"Hola soy \".concat(this.name));\n  }\n};\nperson.saludar(); // this cuando sacamos a una función de un objeto\n\nvar accion = person.saludar;\naccion(); // this en el contexto de una \"clase\"\n\nfunction Person(name) {\n  // this = {}\n  this.name = name;\n}\n\nPerson.prototype.saludar = function () {\n  console.log(\"Me llamo \".concat(this.name));\n};\n\nvar angela = new Person('Angela');\nangela.saludar();</script>\n  </body>\n</html>\n"},"sourceMaps":null,"error":null,"hash":"0cdc8f2d1289279a5d01db3d5d04dcb4","cacheData":{"env":{}}}